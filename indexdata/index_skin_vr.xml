<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

    
  <!-- Spot Style - Display an image -->


  <style name="IconDisplayanimage"
         url="%FIRSTXML%/spots/_1072108510821086108410721090-_user_defaultpoint6.png"
         visible="false"
         edge="center"
         alpha="0.8"
         onhover="onhoverIconDisplayanimage"
         onover="onoverIconDisplayanimage"
         onout="onoutIconDisplayanimage"

         height="50"
         width="50"
         />
  <action name="onhoverIconDisplayanimage">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconDisplayanimage">

tween(alpha, 1);

  </action>
  <action name="onoutIconDisplayanimage">
    hideTooltip();

    tween(alpha, 0.8);

  </action>



  
  <!-- Spot Style - Default Polygon Spot Style -->
  <style name="PolygonDefaultPolygonSpotStyle"
           visible="false"
           bordercolor="0xffffff"
           fillcolor="0xffffff"
           borderwidth="0"
           borderalpha="0.50000762951094835"
           fillalpha="0.20000000000000001"
           capture="false"
           onhover="onhoverPolygonDefaultPolygonSpotStyle"
           onover="onoverPolygonDefaultPolygonSpotStyle"
           onout="onoutPolygonDefaultPolygonSpotStyle"
           />
  <action name="onhoverPolygonDefaultPolygonSpotStyle">
    showTooltip('hotspot');
  </action>

  <action name="onoverPolygonDefaultPolygonSpotStyle">
    set(bordercolor, 0xffffff);
    set(fillcolor, 0xffffff);
    set(borderalpha, 0.50000762951094835);
    set(fillalpha, 0.59999999999999998);
    set(borderwidth, 4);
  </action>

  <action name="onoutPolygonDefaultPolygonSpotStyle">

    set(bordercolor, 0xffffff);
    set(fillcolor, 0xffffff);
    set(borderalpha, 0.50000762951094835);
    set(fillalpha, 0.20000000000000001);

    set(borderwidth, 0);
    hideTooltip();
  </action>



      
  <!-- Picture Spot Style - стенд1 -->

  <style name="RectPictureстенд1"
         distorted="true"
         visible="false"
         scale="1.0" 
         />



    
  <!-- Spot Style - Default Point Spot Style -->


  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/hotspot_direction_big_sequence_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="17"
         framewidth="56"
         frameheight="56"
         stopspotsequence="false"
         crop="0|0|56|56"
         edge="center"
         rotate="180"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"


         />
  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();



  </action>



    
  <!-- Spot Style - Default Point Spot Style 1 -->


  <style name="IconDefaultPointSpotStyle1"
         url="%FIRSTXML%/spots/hotspot_direction_big_sequence_user_defaultpoint1.png"
         visible="false"
         frame="0"
         lastframe="17"
         framewidth="56"
         frameheight="56"
         stopspotsequence="false"
         crop="0|0|56|56"
         edge="center"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle1"
         onout="onoutIconDefaultPointSpotStyle1"


         />
  <action name="onhoverIconDefaultPointSpotStyle1">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconDefaultPointSpotStyle1">
    hideTooltip();



  </action>



    
  <!-- Spot Style - Default Point Spot Style 2 -->


  <style name="IconDefaultPointSpotStyle2"
         url="%FIRSTXML%/spots/hotspot_direction_big_sequence_user_defaultpoint2.png"
         visible="false"
         frame="0"
         lastframe="17"
         framewidth="56"
         frameheight="56"
         stopspotsequence="false"
         crop="0|0|56|56"
         edge="center"
         rotate="270"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle2"
         onout="onoutIconDefaultPointSpotStyle2"


         />
  <action name="onhoverIconDefaultPointSpotStyle2">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconDefaultPointSpotStyle2">
    hideTooltip();



  </action>



  
  <!-- Spot Style - Polygon Spot Style WEB -->
  <style name="PolygonPolygonSpotStyleWEB"
           visible="false"
           bordercolor="0xffffff"
           fillcolor="0xffffff"
           borderwidth="0"
           borderalpha.desktop="0.0"
           fillalpha.desktop="0.0"
           borderalpha.tablet.or.mobile="0.50000762951094835"
           fillalpha.tablet.or.mobile="0.59999999999999998"
           capture="false"
           onhover="onhoverPolygonPolygonSpotStyleWEB"
           onover="onoverPolygonPolygonSpotStyleWEB"
           onout="onoutPolygonPolygonSpotStyleWEB"
           />
  <action name="onhoverPolygonPolygonSpotStyleWEB">
    showTooltip('hotspot');
  </action>

  <action name="onoverPolygonPolygonSpotStyleWEB">
    set(borderwidth, 0);
    set(borderalpha, 0.50000762951094835);
    set(fillalpha, 0.59999999999999998);
  </action>

  <action name="onoutPolygonPolygonSpotStyleWEB">

    set(borderwidth, 0);
    set(borderalpha, 0.0);
    set(fillalpha, 0.0);
    hideTooltip();
  </action>



  <!-- unsupported kind of display : PointMap -->


  <!-- unsupported kind of display : PointMap -->


    
  <!-- Spot Style - Default Point Spot Style 3 -->


  <style name="IconDefaultPointSpotStyle3"
         url="%FIRSTXML%/spots/hotspot_neutral_big_sequence_user_defaultpoint3.png"
         visible="false"
         frame="0"
         lastframe="17"
         framewidth="56"
         frameheight="56"
         stopspotsequence="false"
         crop="0|0|56|56"
         edge="center"
         rotate="270"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle3"
         onout="onoutIconDefaultPointSpotStyle3"


         />
  <action name="onhoverIconDefaultPointSpotStyle3">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconDefaultPointSpotStyle3">
    hideTooltip();



  </action>



    
  <!-- Spot Style - Load panorama -->


  <style name="IconLoadpanorama"
         url="%FIRSTXML%/spots/hotspot_neutral_sequence_user_defaultpoint5.png"
         visible="false"
         frame="0"
         lastframe="17"
         framewidth="40"
         frameheight="40"
         stopspotsequence="false"
         crop="0|0|40|40"
         edge="center"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconLoadpanorama"
         onout="onoutIconLoadpanorama"


         />
  <action name="onhoverIconLoadpanorama">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconLoadpanorama">
    hideTooltip();



  </action>



  <!-- FLOORPLAN -->
  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>


  <!-- ************* -->
  <!-- Scene History -->
  <!-- ************* -->
<sceneshistory        name="firstone"/>
<sceneshlookathistory name="firstone"/>
<scenesvlookathistory name="firstone"/>
<krpano scenehistoryindex="-1" scenehistoryaction="noaction" scenehistorygobackenabled="false" scenehistorygoforwardenabled="false"/>
<events name="scenehistoryevents" onnewpano="scenehistoryonnewpano" onleavingscene="scenehistoryonleavingscene" keep="true"/>
<action name="scenehistorycheckactionsstate">
    set(dispatcheventhistorystatechanged, false);

    sub(lastidx, sceneshistory.count, 1);
    if (scenehistoryindex == lastidx,
      if (scenehistorygoforwardenabled,
        set(scenehistorygoforwardenabled, false);
        set(dispatcheventhistorystatechanged, true);
      );
     ,
      if (!scenehistorygoforwardenabled,
        set(scenehistorygoforwardenabled, true);
        set(dispatcheventhistorystatechanged, true);
      );
    );

    if (scenehistoryindex == 0,
      if (scenehistorygobackenabled,
        set(scenehistorygobackenabled, false);
        set(dispatcheventhistorystatechanged, true);
      );
     ,
      if (!scenehistorygobackenabled,
        set(scenehistorygobackenabled, true);
        set(dispatcheventhistorystatechanged, true);
      );
    );

    if (dispatcheventhistorystatechanged,
      events.dispatch(onhistoryactionsstatechanged);
    );
</action>
<action name="scenehistoryonleavingscene">
  txtadd(leavinghistid, "scene", get(scenehistoryindex));
  set(sceneshlookathistory[get(leavinghistid)].value, get(view.hlookat));
  set(scenesvlookathistory[get(leavinghistid)].value, get(view.vlookat));
</action>
<action name="scenehistoryonnewpano">
  if (scenehistoryindex === -1,
    set(scenehistoryaction, "noaction");

    inc(scenehistoryindex);
    txtadd(newhistid, "scene", get(scenehistoryindex));

    sceneshistory.createarrayitem(get(newhistid));
    set(sceneshistory[get(newhistid)].value, get(xml.scene));
    sceneshlookathistory.createarrayitem(get(newhistid));
    set(sceneshlookathistory[get(newhistid)].value, get(view.hlookat));
    scenesvlookathistory.createarrayitem(get(newhistid));
    set(scenesvlookathistory[get(newhistid)].value, get(view.vlookat));

    sceneshistory.removearrayitem("firstone");
    sceneshlookathistory.removearrayitem("firstone");
    scenesvlookathistory.removearrayitem("firstone");
  ,
    if (scenehistoryaction == "noaction",
      inc(scenehistoryindex);
      if (scenehistoryindex != sceneshistory.count,
        txtadd(newhistid, "scene", get(scenehistoryindex));
        if (sceneshistory[get(newhistid)].value != xml.scene,
          sub(lastidx, sceneshistory.count, 1);
          for( copy(i,scenehistoryindex), 
               i LE lastidx, 
               inc(i), 
               txtadd(histidtoremove, "scene", get(i));
               sceneshistory.removearrayitem(get(histidtoremove));
               sceneshlookathistory.removearrayitem(get(histidtoremove));
               scenesvlookathistory.removearrayitem(get(histidtoremove));
          );
        );
      );
      txtadd(newhistid, "scene", get(scenehistoryindex));
      sceneshistory.createarrayitem(get(newhistid));
      set(sceneshistory[get(newhistid)].value, get(xml.scene));
      sceneshlookathistory.createarrayitem(get(newhistid));
      set(sceneshlookathistory[get(newhistid)].value, get(view.hlookat));
      scenesvlookathistory.createarrayitem(get(newhistid));
      set(scenesvlookathistory[get(newhistid)].value, get(view.vlookat));
     ,
      if (scenehistoryaction == "goback",
        dec(scenehistoryindex);
       ,
        inc(scenehistoryindex);
      );
    );
    set(scenehistoryaction, "noaction");
  );
  scenehistorycheckactionsstate();
</action>
<action name="scenehistorygoback">
  if (scenehistoryindex GT 0,
    set(scenehistoryaction, "goback");
    sub(newidx, scenehistoryindex, 1);

    mainloadscene(get(sceneshistory[get(newidx)].value));
    if (%1, lookat( get(sceneshlookathistory[get(newidx)].value), get(scenesvlookathistory[get(newidx)].value)););
  );
</action>
<action name="scenehistorygoforward">
  sub(lastidx, sceneshistory.count, 1);

  if (scenehistoryindex LT lastidx,
    set(scenehistoryaction, "goforward");
    add(newidx, scenehistoryindex, 1);

    mainloadscene(get(sceneshistory[get(newidx)].value));
    if (%1, lookat( get(sceneshlookathistory[get(newidx)].value), get(scenesvlookathistory[get(newidx)].value)););
  );
</action>

<action name="setViewArchitectural">
	if(normalViewActivated,stopSetViewTweens(););
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	set(view.fovmax, get(panoview.fovmax));
	set(view.fisheyefovlink, 0.5);
	tween(view.architectural, 1.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fisheye, 0.0, distance(1.0, 0.45), easeOutQuad, 
		set(view.stereographic,false);
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url.flash="%SWFPATH%/graphics/soundinterface.swf"
          url.html5="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          bgsoundtoforce = "false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            set(plugin[soundinterface].bgsoundtoforce, false);
            if(scene[get(xml.scene)].video == false OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
           ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            ,

              if(device.mobile OR device.tablet OR device.safari OR device.chrome,
                resumesound(bgsoundname);
                set(plugin[soundinterface].bgsoundpaused, false);
              );
            );
          ,
            if(((plugin[soundinterface].bgsoundpaused == true OR plugin[soundinterface].bgsoundtoforce == true) AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              set(plugin[soundinterface].bgsound, true);
              set(plugin[soundinterface].bgsoundpaused, false);
              set(plugin[soundinterface].bgsoundloopended, false);
              set(plugin[soundinterface].bgsoundtoforce, false);
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
          );
        );
      );
      
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        
      );
    );
  </action>
  <action name="preloadSounds">
    preloadsound("sound_16336.mp3");
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          ,

            if(device.mobile OR device.tablet OR device.safari OR device.chrome,
              set(tour_current_played_sound_paused, false);
              resumesound(get(tour_current_played_sound));
            );
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

<action name="setViewNormal">
	stopSetViewTweens();
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	set(view.fisheyefovlink, 0.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
	tween(view.fisheye, 0.0, distance(1.0, 0.45),
		set(view.stereographic,false);
	);
</action>

<krpano normalViewActivated="true" />
<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
	stoptween(view.pannini);
</action>

<action name="setViewLittlePlanet">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewLittlePlanetComplete();
	);
</action>

<action name="setViewLittlePlanetComplete">
	set(backtonormalfirst,false);
	if(view.pannini GE 1.0, set(backtonormalfirst,true));
	if(view.stereographic == false, set(backtonormalfirst,true));
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	set(view.stereographic, true);
	set(view.fisheyefovlink, 1.5);
	tween(view.architectural, 0.0, 0.25);
	tween(view.vlookat, 90, distance(179, 1.50));
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.fov, 150, distance(179, 0.75));
</action>

</krpano>